#!/bin/bash

# Argument Parsing
#------------------------------------------------------------------------------
POSITIONAL=()
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -a|--apply)
      ACTION=apply
      shift
    ;;

    -d|--docs)
      DOCS=true
      shift
    ;;

    -i|--init)
      ACTION=init
      shift
    ;;

    --destroy)
      ACTION=destroy
      shift
    ;;

    -e|--environment)
      ENVIRONMENT="$2"
      shift
      shift
    ;;

    *)
      ENVIRONMENT="$1"
      POSITIONAL+=("$1")
      shift
    ;;
  esac
done
set -- "${POSITIONAL[@]}"

# Validation
#------------------------------------------------------------------------------
if [ "$ENVIRONMENT" = "" ]; then
  echo "Must provide an environment to deploy"
  exit
fi

case $ENVIRONMENT in
  "dev")
      ENVIRONMENT=development
    ;;
  "int")
      ENVIRONMENT=internal
    ;;
  "prod")
      ENVIRONMENT=production
    ;;
esac

ENVIRONMENT_PATH="env_$ENVIRONMENT"

if [ ! -d "$ENVIRONMENT_PATH" ]; then
  echo "Invalid Environment $ENVIRONMENT"
  exit
fi

ENVIRONMENT_PLAN="$ENVIRONMENT.plan"
ENVIRONMENT_PLAN_PATH="$ENVIRONMENT_PATH/$ENVIRONMENT_PLAN"

# Informational
#------------------------------------------------------------------------------
echo "Current Working Directory: `pwd`"
echo "Environment: $ENVIRONMENT"
echo "Environment Path: $ENVIRONMENT_PATH"
echo "Environment Plan: $ENVIRONMENT_PLAN_PATH"
if [ -f "$ENVIRONMENT_PLAN_PATH" ]; then
  echo "Environment Plan Exists"
fi
echo "------------------------------------------------------------------------"

# Entry Point
#------------------------------------------------------------------------------
echo "Generating documentation for $ENVIRONMENT"
echo "------------------------------------------------------------------------"

function generate() {
  echo "# Environment: $ENVIRONMENT" > ./$ENVIRONMENT_PATH/README.md
  terraform-docs markdown environment >> ./$ENVIRONMENT_PATH/README.md

  echo "# Module: certificates" > ./modules/certificates/README.md
  terraform-docs markdown modules/certificates >> ./modules/certificates/README.md

  echo "# Module: rancher" > ./modules/rancher/README.md
  terraform-docs markdown modules/rancher >> ./modules/rancher/README.md

  echo "# Module: secrets" > ./modules/secrets/README.md
  terraform-docs markdown modules/secrets >> ./modules/secrets/README.md
}
generate

#------------------------------------------------------------------------------
echo "Formatting source files for $ENVIRONMENT"
echo "------------------------------------------------------------------------"
terraform fmt

#------------------------------------------------------------------------------
echo "Executing $ENVIRONMENT"
echo "------------------------------------------------------------------------"
cd $ENVIRONMENT_PATH

function apply() {
  if [ ! -f "$ENVIRONMENT_PLAN" ]; then
    echo "Creating Plan File"
    echo "------------------------------------------------------------------------"
    run
    echo "------------------------------------------------------------------------"
  fi
  terraform apply $ENVIRONMENT_PLAN
  cleanup
}

function cleanup() {
  if [ -f "$ENVIRONMENT_PLAN" ]; then
    rm -r "$ENVIRONMENT_PLAN"
  fi
}

function destroy() {
  terraform destroy
}

function init () {
  terraform init
}

function run() {
  if [ ! -d ".terraform" ]; then
    init
    terraform validate
  fi
  terraform plan -out="$ENVIRONMENT_PLAN"
}

case $ACTION in
  "apply")
      apply
    ;;
  "destroy")
      destroy
    ;;
  "init")
      init
    ;;
  *)
      run
    ;;
esac
